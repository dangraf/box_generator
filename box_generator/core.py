# AUTOGENERATED! DO NOT EDIT! File to edit: 00_core.ipynb (unless otherwise specified).

__all__ = ['OneLine', 'line2segmented_pointlist', 'segments_to_tabs', 'tabs2holes']

# Cell
import numpy as np
import matplotlib.pyplot as plt

# Cell
def _get_ax(line):
    """ returns the direction of the line
    [param] line: tuple or np.array of length 4, where 0,1 is point 1 and 3,4 is point 2
    """
    if np.isclose(line[0],line[2]) and line[1] != line[3]:
        return 1
    else:
        return 0

# Cell
class OneLine(np.ndarray):
    """
    Class that is baisically an np.array with length of 4 to contain two points.
    It also have some helper functions to move the line in different directions or plot it.
    This class is very simple and are assuming all lines to be orthogonal where the attribute ax tells which direction the line goes.
    ax=0, x-direction (index 0)
    ax=1, y-direction (index 1)
    """
    def __init__(self, a):
        super().__init__()
        self.ax=_get_ax(self)
        self.ay= (self.ax+1)%2

    def __new__(cls, line):
        return np.asarray(line, dtype=float).view(cls)

    def move_xy(self,x,y):
        "Moves line in x,y direction"
        self +=[x,y,x,y]

    def move_in_ax(self, dist):
        "Moves line in the line direction"
        self[[self.ax, self.ax+2]] += dist

    def move_in_ay(self, dist):
        "Moves line orthogonal to it's direction"
        ay = (self.ax+1)%2
        self[[ay, ay+2]] += dist

    def to_points(self):
        "Converts line to list of points"
        return self.reshape(2,2)

    def __repr__(self):
        return f"l: {self}, ax: {self.ax}"

    def copy(self):
        return OneLine(self)

    def plot(self, **kwargs):
        "Plots current line"
        p = self.to_points()
        plt.plot(p[:,0],p[:,1], **kwargs)

# Cell
def line2segmented_pointlist(line, min_tab_mm):
    """
    This fuction splits a line into segments that can be used to generate tabs or holes.
    The min_tab_mm tells the minimum tabsize but might adjusts it a bit larger to always make
    number of tabs an even number so it's symetrical
    \[param] min_tab_mm

    \[return]: list of points, shape (number of segments, 2(x,y))
    """
    line=OneLine(line)
    diff =  line[line.ax+2] - line[line.ax]
    if diff<0:
        line[:] = line[[2,3,0,1]]
    num_tabs = int(abs(diff/min_tab_mm))
    if num_tabs%2==0:
        num_tabs -=1
    tab_size= abs(diff/num_tabs)
    all_tabs = np.arange(line[line.ax], line[line.ax+2]+1, tab_size)
    ret = np.zeros((len(all_tabs),2))
    ret[:,line.ax] = all_tabs
    ret[:,line.ay] = line[line.ay]
    return ret

# Cell
def segments_to_tabs(segments, ax, thickness):
    """
    genrates tabs from a segmented point list
    You can change if the first tab is male of female by changing the sign of the tab-size
    """
    arr_x = np.repeat(segments[:,ax], 2)
    arr_y = np.tile([0,0, thickness, thickness], len(segments)//2+1)[1:-3]
    ret = np.zeros((len(arr_x),2))
    ret[:,ax] = arr_x
    ay =(ax+1)%2
    ret[:,ay] = arr_y
    points = ret[1:-1,:]

    lines = np.hstack([points[:-1], points[1:]])
    if thickness <0:
        lines[:,[ay, ay+2]] -= thickness

    return lines

# Cell
def tabs2holes(tabs, ax):
    tabs=tabs.copy()
    to_modify = np.arange(0,len(tabs)-1,4)
    values_from = np.arange(4,len(tabs),4)
    tabs[to_modify,ax] = tabs[values_from,ax]
    return tabs[:-1]