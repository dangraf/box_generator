# AUTOGENERATED! DO NOT EDIT! File to edit: 00_boxprimitives.ipynb (unless otherwise specified).

__all__ = ['OneLine', 'LineObj', 'plot_lines']

# Cell
#export
import numpy as np
import matplotlib.pyplot as plt

# Cell
def _get_ax(line):
    """ returns the direction of the line
    [param] line: tuple or np.array of length 4, where 0,1 is point 1 and 3,4 is point 2
    """
    if np.isclose(line[0],line[2]) and line[1] != line[3]:
        return 1
    else:
        return 0

# Cell
class OneLine(np.ndarray):
    "Holds information for a line with coordinates the form x1, y1, x2, y2] and all sub-functions to it."
    def __init__(self, array):
        super().__init__()
        self.ax=_get_ax(self)
        self.ay= (self.ax+1)%2

    def __new__(cls, line):
        return np.asarray(line, dtype=float).copy().view(cls)

    def move_xy(self,x,y):
        self +=[x,y,x,y]

    def move_in_ax(self, dist):
        "moves line in line_direction"
        self[[self.ax, self.ax+2]] += dist

    def move_in_ay(self, dist):
        "moves line perpendicular to line-direction"
        ay = (self.ax+1)%2
        self[[ay, ay+2]] += dist

    def to_points(self):
        return self.reshape(2,2)

    def __repr__(self):
        return f"l: {self}, ax: {self.ax}"

    def copy(self):
        return OneLine(self)

    def plot(self,**kwargs):
        "plots the line"
        p = self.to_points()
        plt.plot(p[:,0],p[:,1],**kwargs)

# Cell
def _line2segmented_pointlist(line, min_tab_mm):
    """
    This fuction splits a line into segments that can be used to generate tabs or holes.
    The min_tab_mm tells the minimum tabsize but might adjusts it a bit larger to always make
    number of tabs an even number so it's symetrical
    \[param] min_tab_mm

    \[return]: list of points, shape (number of segments, 2(x,y))
    """
    line=OneLine(line)
    diff =  line[line.ax+2] - line[line.ax]
    if diff<0:
        line[:] = line[[2,3,0,1]]
    num_tabs = int(abs(diff/min_tab_mm))
    if num_tabs%2==0:
        num_tabs -=1
    tab_size= abs(diff/num_tabs)
    all_tabs = np.arange(line[line.ax], line[line.ax+2]+1, tab_size)
    ret = np.zeros((len(all_tabs),2))
    ret[:,line.ax] = all_tabs
    ret[:,line.ay] = line[line.ay]
    return ret

# Cell
def _segments_to_tabs(segments, ax, tabsize):
    """
    genrates tabs from a segmented point list
    """
    arr_x = np.repeat(segments[:,ax], 2)
    arr_y = np.tile([0,0, tabsize, tabsize], len(segments)//2+1)[1:-3]
    ret = np.zeros((len(arr_x),2))
    ret[:,ax] = arr_x
    ay =(ax+1)%2
    ret[:,ay] = arr_y
    points = ret[1:-1,:]

    lines = np.hstack([points[:-1], points[1:]])
    if tabsize <0:
        lines[:,[ay, ay+2]] -= tabsize

    return lines

# Cell
def _tabs2holes(tabs, ax):
    tabs=tabs.copy()
    to_modify = np.arange(0,len(tabs)-1,4)
    values_from = np.arange(4,len(tabs),4)
    tabs[to_modify,ax] = tabs[values_from,ax]
    return tabs[:-1]

# Cell
class LineObj:
    def __init__(self, lines, ax=None):
        self.lines = np.array(lines, dtype=float)
        self.mx = 0
        self.my = 0
        self.ax=ax

    def __getitem__(self, key):
        return self.lines[key]

    def __setitem__(self, key, value):
        self.lines[key] = value

    @classmethod
    def generate_tabs(cls, line, min_tab_mm, plywood_thick_mm, comp=True):
        line = OneLine(line)
        #if type(line) is OneLine:
        #    line = line.line

        segments = _line2segmented_pointlist(line, min_tab_mm)
        tabs = _segments_to_tabs(segments, line.ax, plywood_thick_mm)
        tabs[:,line.ay] += line[line.ay]
        tabs[:,line.ay+2] += line[line.ay]

        if plywood_thick_mm < 0:
            tabs[:,line.ay] += plywood_thick_mm
            tabs[:,line.ay+2] += plywood_thick_mm

        tabs[0,line.ax] += abs(plywood_thick_mm)*comp
        tabs[-1,line.ax+2] -= abs(plywood_thick_mm)*comp
        return cls(tabs, line.ax)

    @classmethod
    def generate_holes(cls, line, min_tab_mm, plywood_thick_mm, comp=True):
        """

        \[param] comp: True: generates the holes in the middle of the line. otherwize it't on the top of the line
        """
        line = OneLine(line)
        segments = _line2segmented_pointlist(line, min_tab_mm)
        tabs = _segments_to_tabs(segments, line.ax, plywood_thick_mm)
        tabs = _tabs2holes(tabs, line.ax)
        # move holes to the position of the line
        tabs[:,line.ay] += line[line.ay] - comp* plywood_thick_mm/2
        tabs[:,line.ay+2] += line[line.ay] - comp* plywood_thick_mm/2


        return cls(tabs, line.ax)

    def reset_move(self):
        self.mx=0
        self.my=0

    def move_xy(self, x, y):
        self.lines += [x,y,x,y]
        self.mx +=x
        self.my +=y

    def move_in_ax(self, dist):
        self.lines[:,[self.ax, self.ax+2]] += dist
        if self.ax==0:
            self.mx+=dist
        else:
            self.my+=dist
    def move_in_ay(self, dist):
        ay  = (self.ax+1)%2
        self.lines[:,[ay, ay+2]] += dist
        if self.ax==0:
            self.my+=dist
        else:
            self.mx+=dist

    def plot(self):
        for l in self.lines:
            l = l.reshape(2,2)
            plt.plot(l[:,0], l[:,1])

# Cell
def plot_lines(lines):
    for l in lines:
        l = l.reshape(2,2)
        plt.plot(l[:,0], l[:,1])